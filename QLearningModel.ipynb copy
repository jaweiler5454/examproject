{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# code from https://gist.github.com/malzantot/9d1d3fa4fdc4a101bc48a135d8f9a289 -- the only thing that I changed were the variable values to experiment with stochastic vs deterministic modeling\n",
    "# comments nearly all written by me\n",
    "\n",
    "#import libraries\n",
    "import numpy as np\n",
    "import gym\n",
    "from gym import wrappers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#declare variables:\n",
    "n_states = 40 # declare number of action-reward states\n",
    "iter_max = 10000 # number of value iteration updates\n",
    "\n",
    "initial_lr = 1.0 # alpha, therefore he gives it as fully deterministic at the start\n",
    "min_lr = 0.003 # given that he changes alpha, he quantifies the minimum learning rate -- denoting that he will not let the model be fully stochastic ever\n",
    "gamma = 1.0 # discount factor, 1 value means deep reinforcement\n",
    "t_max = 10000\n",
    "eps = 0.02 # epsilon acts as a \"random check\" which arbitrarily determines if exploration continues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_episode(env, policy=None, render=False):\n",
    "    obs = env.reset()\n",
    "    total_reward = 0\n",
    "    step_idx = 0\n",
    "    for _ in range(t_max):\n",
    "        if render:\n",
    "            env.render()\n",
    "        if policy is None:\n",
    "            action = env.action_space.sample()\n",
    "        else:\n",
    "            a,b = obs_to_state(env, obs)\n",
    "            action = policy[a][b]\n",
    "        obs, reward, done, _ = env.step(action)\n",
    "        total_reward += gamma ** step_idx * reward # increase alpha by factor of discount factor * current state reward\n",
    "        step_idx += 1\n",
    "        if done:\n",
    "            break\n",
    "    return total_reward"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def obs_to_state(env, obs):\n",
    "    \"\"\" Maps an observation to state \"\"\"\n",
    "    env_low = env.observation_space.low\n",
    "    env_high = env.observation_space.high\n",
    "    env_dx = (env_high - env_low) / n_states\n",
    "    a = int((obs[0] - env_low[0])/env_dx[0])\n",
    "    b = int((obs[1] - env_low[1])/env_dx[1])\n",
    "    return a, b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[2018-01-14 18:08:12,819] Making new env: MountainCar-v0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----- using Q Learning -----\n",
      "Iteration #1 -- Total reward = -200.\n",
      "Iteration #101 -- Total reward = -200.\n",
      "Iteration #201 -- Total reward = -200.\n",
      "Iteration #301 -- Total reward = -200.\n",
      "Iteration #401 -- Total reward = -200.\n",
      "Iteration #501 -- Total reward = -200.\n",
      "Iteration #601 -- Total reward = -200.\n",
      "Iteration #701 -- Total reward = -200.\n",
      "Iteration #801 -- Total reward = -200.\n",
      "Iteration #901 -- Total reward = -200.\n",
      "Iteration #1001 -- Total reward = -200.\n",
      "Iteration #1101 -- Total reward = -200.\n",
      "Iteration #1201 -- Total reward = -200.\n",
      "Iteration #1301 -- Total reward = -200.\n",
      "Iteration #1401 -- Total reward = -200.\n",
      "Iteration #1501 -- Total reward = -200.\n",
      "Iteration #1601 -- Total reward = -178.\n",
      "Iteration #1701 -- Total reward = -200.\n",
      "Iteration #1801 -- Total reward = -200.\n",
      "Iteration #1901 -- Total reward = -200.\n",
      "Iteration #2001 -- Total reward = -200.\n",
      "Iteration #2101 -- Total reward = -200.\n",
      "Iteration #2201 -- Total reward = -200.\n",
      "Iteration #2301 -- Total reward = -200.\n",
      "Iteration #2401 -- Total reward = -200.\n",
      "Iteration #2501 -- Total reward = -200.\n",
      "Iteration #2601 -- Total reward = -200.\n",
      "Iteration #2701 -- Total reward = -200.\n",
      "Iteration #2801 -- Total reward = -200.\n",
      "Iteration #2901 -- Total reward = -200.\n",
      "Iteration #3001 -- Total reward = -200.\n",
      "Iteration #3101 -- Total reward = -200.\n",
      "Iteration #3201 -- Total reward = -200.\n",
      "Iteration #3301 -- Total reward = -200.\n",
      "Iteration #3401 -- Total reward = -200.\n",
      "Iteration #3501 -- Total reward = -200.\n",
      "Iteration #3601 -- Total reward = -200.\n",
      "Iteration #3701 -- Total reward = -200.\n",
      "Iteration #3801 -- Total reward = -200.\n",
      "Iteration #3901 -- Total reward = -200.\n",
      "Iteration #4001 -- Total reward = -200.\n",
      "Iteration #4101 -- Total reward = -200.\n",
      "Iteration #4201 -- Total reward = -200.\n",
      "Iteration #4301 -- Total reward = -200.\n",
      "Iteration #4401 -- Total reward = -200.\n",
      "Iteration #4501 -- Total reward = -200.\n",
      "Iteration #4601 -- Total reward = -200.\n",
      "Iteration #4701 -- Total reward = -200.\n",
      "Iteration #4801 -- Total reward = -200.\n",
      "Iteration #4901 -- Total reward = -200.\n",
      "Iteration #5001 -- Total reward = -200.\n",
      "Iteration #5101 -- Total reward = -200.\n",
      "Iteration #5201 -- Total reward = -200.\n",
      "Iteration #5301 -- Total reward = -200.\n",
      "Iteration #5401 -- Total reward = -200.\n",
      "Iteration #5501 -- Total reward = -200.\n",
      "Iteration #5601 -- Total reward = -200.\n",
      "Iteration #5701 -- Total reward = -200.\n",
      "Iteration #5801 -- Total reward = -200.\n",
      "Iteration #5901 -- Total reward = -200.\n",
      "Iteration #6001 -- Total reward = -200.\n",
      "Iteration #6101 -- Total reward = -200.\n",
      "Iteration #6201 -- Total reward = -200.\n",
      "Iteration #6301 -- Total reward = -200.\n",
      "Iteration #6401 -- Total reward = -200.\n",
      "Iteration #6501 -- Total reward = -200.\n",
      "Iteration #6601 -- Total reward = -200.\n",
      "Iteration #6701 -- Total reward = -200.\n",
      "Iteration #6801 -- Total reward = -200.\n",
      "Iteration #6901 -- Total reward = -200.\n",
      "Iteration #7001 -- Total reward = -200.\n",
      "Iteration #7101 -- Total reward = -200.\n",
      "Iteration #7201 -- Total reward = -200.\n",
      "Iteration #7301 -- Total reward = -200.\n",
      "Iteration #7401 -- Total reward = -200.\n",
      "Iteration #7501 -- Total reward = -200.\n",
      "Iteration #7601 -- Total reward = -200.\n",
      "Iteration #7701 -- Total reward = -200.\n",
      "Iteration #7801 -- Total reward = -200.\n",
      "Iteration #7901 -- Total reward = -200.\n",
      "Iteration #8001 -- Total reward = -200.\n",
      "Iteration #8101 -- Total reward = -200.\n",
      "Iteration #8201 -- Total reward = -200.\n",
      "Iteration #8301 -- Total reward = -200.\n",
      "Iteration #8401 -- Total reward = -200.\n",
      "Iteration #8501 -- Total reward = -200.\n",
      "Iteration #8601 -- Total reward = -200.\n",
      "Iteration #8701 -- Total reward = -200.\n",
      "Iteration #8801 -- Total reward = -200.\n",
      "Iteration #8901 -- Total reward = -200.\n",
      "Iteration #9001 -- Total reward = -200.\n",
      "Iteration #9101 -- Total reward = -200.\n",
      "Iteration #9201 -- Total reward = -200.\n",
      "Iteration #9301 -- Total reward = -200.\n",
      "Iteration #9401 -- Total reward = -200.\n",
      "Iteration #9501 -- Total reward = -200.\n",
      "Iteration #9601 -- Total reward = -200.\n",
      "Iteration #9701 -- Total reward = -200.\n",
      "Iteration #9801 -- Total reward = -200.\n",
      "Iteration #9901 -- Total reward = -200.\n"
     ]
    }
   ],
   "source": [
    "# create and initialize the environment\n",
    "if __name__ == '__main__':\n",
    "    env_name = 'MountainCar-v0' #using MountainCar\n",
    "    env = gym.make(env_name) #create the gym\n",
    "    env.seed(0) #seeding allows the program to be rerun and get the same values again -- help from Peter to understand this\n",
    "    np.random.seed(0)\n",
    "    print ('----- using Q Learning -----')\n",
    "    q_table = np.zeros((n_states, n_states, 3))\n",
    "    for i in range(iter_max):\n",
    "        obs = env.reset()\n",
    "        total_reward = 0 # reward initialized to 0\n",
    "        ## eta: learning rate is decreased at each step\n",
    "        eta = max(min_lr, initial_lr * (0.85 ** (i//100)))\n",
    "        for j in range(t_max):\n",
    "            a, b = obs_to_state(env, obs)\n",
    "            if np.random.uniform(0, 1) < eps: # compare random to epsilon value for exploration\n",
    "                action = np.random.choice(env.action_space.n)\n",
    "            else:\n",
    "                logits = q_table[a][b] # if random value is not less than epsilon comparison, \n",
    "                logits_exp = np.exp(logits) # logits_exp = the exponential of all of the table values (np.exp does this)\n",
    "                probs = logits_exp / np.sum(logits_exp) # divide exponential by its sum\n",
    "                action = np.random.choice(env.action_space.n, p=probs) # define action for this state\n",
    "            obs, reward, done, _ = env.step(action) #assign reward to action for current state\n",
    "            total_reward += reward # increase reward based on current step\n",
    "            ## update q table\n",
    "            a_, b_ = obs_to_state(env, obs)\n",
    "            q_table[a][b][action] = q_table[a][b][action] + eta * (reward + gamma *  np.max(q_table[a_][b_]) - q_table[a][b][action]) #update q based on observed action/reward -- this is the equation\n",
    "            if done:\n",
    "                break\n",
    "        if i % 100 == 0: #every 100 steps....\n",
    "            print('Iteration #%d -- Total reward = %d.' %(i+1, total_reward))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average score of solution =  -132.57\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "-158.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solution_policy = np.argmax(q_table, axis=2)\n",
    "solution_policy_scores = [run_episode(env, solution_policy, False) for _ in range(100)]\n",
    "print(\"Average score of solution = \", np.mean(solution_policy_scores))\n",
    "# Animate it\n",
    "run_episode(env, solution_policy, True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
